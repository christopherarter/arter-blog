---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import Share from '../../components/Share.astro';
import AuthorCard from '../../components/AuthorCard.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';
import Newsletter from '../../components/Newsletter.astro';
import BlogPostLayout from '../../layouts/BlogPostLayout.astro';
import { extractHeadingsFromMarkdown } from '../../utils/markdown-utils';
import TableOfContents from '../../components/TableOfContents.astro';
import ArticleSchema from '../../components/ArticleSchema.astro';
import BreadcrumbSchema from '../../components/BreadcrumbSchema.astro';

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { id: post.id },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo, subtitle } = post.data;
const { Content } = await render(post);

// Extract headings from markdown for table of contents
const headings = extractHeadingsFromMarkdown(post.body || '');

// Breadcrumb data
const breadcrumbs = [
    { name: 'Home', url: 'https://arter.dev/' },
    { name: 'Blog', url: 'https://arter.dev/blog/' },
    { name: title, url: href }
];
---

<BlogPostLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} showHeader={false} headings={headings}>
    <ArticleSchema post={post} url={href} />
    <BreadcrumbSchema items={breadcrumbs} />
    <article class="">
        <header class="mb-8 flex flex-col gap-8">
            <h1 class="text-4xl md:text-6xl font-serif font-bold leading-tight blog-post-title">{title}</h1>
            {subtitle && <p class="text-2xl md:text-3xl font-serif font-medium">{subtitle}</p>}
            {
                tags.length > 0 && (
                    <div class="mt-4 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            {
                publishDate && (
                    <>
                        <span>
                            Written by <strong>Chris Arter</strong> | Published on <FormattedDate date={publishDate} />
                        </span>
                    </>
                )
            }
            {
                updatedDate && (
                    <>
                        {' '}
                        <span>
                            (Updated on <FormattedDate date={updatedDate} />)
                        </span>
                    </>
                )
            }
        </header>
    </article>
    <div class="max-w-none prose prose-dante sm:prose-lg content" id="main-content">
        {seo?.image?.src && <img src={seo.image.src} alt={seo.image.alt} class="w-full h-auto" />}
        <Content />
        <Newsletter />
        <Share title={title} url={href} />
        <AuthorCard />
        <div class="giscus mt-12">
            <script
                src="https://giscus.app/client.js"
                data-repo="christopherarter/arter-blog"
                data-repo-id="R_kgDONtMC0Q"
                data-category="General"
                data-category-id="DIC_kwDONtMC0c4Cmpzl"
                data-mapping="pathname"
                data-strict="0"
                data-reactions-enabled="1"
                data-emit-metadata="0"
                data-input-position="bottom"
                data-theme="preferred_color_scheme"
                data-lang="en"
                crossorigin="anonymous"
                async></script>
        </div>
    </div>
    <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
        {
            tags.length > 0 && (
                <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                    {tags.map((tag) => (
                        <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                            #{tag}
                        </a>
                    ))}
                </div>
            )
        }
        <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">Share</Button>
    </div>
    {
        (prevPost || nextPost) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-2xl md:text-4xl font-serif font-medium leading-tight sm:mb-16">Read Next</h2>
                {nextPost && <PostPreview post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevPost && <PostPreview post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
    <Subscribe class="my-16 sm:my-24" />
</BlogPostLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        // Add IDs to headings to match table of contents
        const content = document.getElementById('main-content');
        if (content) {
            const headings = content.querySelectorAll('h2, h3, h4, h5, h6');
            headings.forEach((element) => {
                const heading = element as HTMLHeadingElement;
                if (!heading.id) {
                    const text = heading.textContent || '';
                    heading.id = text
                        .toLowerCase()
                        .replace(/[^\w\s-]/g, '') // Remove special characters
                        .replace(/\s+/g, '-') // Replace spaces with hyphens
                        .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
                }
            });
        }

        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = 'Copied';

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
